import serial
import struct
import time

# 시리얼 포트 설정
ser = serial.Serial(
    port='/dev/ttyTHS0',         # 포트 설정
    baudrate=115200,             # 바우드레이트
    parity=serial.PARITY_EVEN,   # 패리티
    stopbits=serial.STOPBITS_ONE,# 스톱 비트
    bytesize=serial.EIGHTBITS,   # 데이터 비트
    timeout=1                    # 타임아웃 설정
)

# 포트가 열렸는지 확인
#if ser.isOpen():
    #print("Serial port opened successfully")

# INIT 명령 보내기
ser.write(b'INIT' + struct.pack('<I', 4) + struct.pack('<I', 115200))
response = ser.read(9)
#print("INIT Response:", response)

try:
    while True:
        # GNFD 명령으로 PDAT 활성화
        ser.write(b'GNFD' + struct.pack('<I', 4) + struct.pack('<I', 0x04))
        response = ser.read(9)  # GNFD 응답 기다리기
        #print("GNFD Response:", response)

        # PDAT 데이터 읽기
        pdat_header = ser.read(8)  # PDAT 헤더 읽기
        if pdat_header[:4] == b'PDAT':
            pdat_length = struct.unpack('<I', pdat_header[4:])[0]
            pdat_payload = ser.read(pdat_length)  # PDAT 페이로드 읽기

            # PDAT 페이로드 파싱
            output = []
            for i in range(0, pdat_length, 8):
                target_data = pdat_payload[i:i+8]
                distance, speed, angle, magnitude = struct.unpack('<HHhh', target_data)
                speed = speed/100
                angle = angle/100
                magnitude = magnitude/100
                output.append(f"D:{distance}cm S:{speed}km/h A:{angle}° M:{magnitude}")
            print(" | ".join(output))

        # 1초 대기
        time.sleep(1)

except KeyboardInterrupt:
    print("Program terminated by user")

finally:
    # 포트 닫기
    ser.close()
